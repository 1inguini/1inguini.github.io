{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE StandaloneDeriving #-}

-- | basic templates
module Template
  ( module Hakyll,
    module Lucid,
    module Data.Functor.Identity,
    BlogPost (..),
    Link,
    IndexData (..),
    https,
    defaultFeedConfig,
    mkBlogPost,
    template,
    link,
    newTabAttr,
    obviousLink,
    githubLink,
    linkList,
  )
where

import Data.Binary
import Data.Functor.Identity
import Data.String (IsString)
import Data.Text (Text, pack)
import Data.Typeable
import GHC.Generics (Generic)
import Hakyll (FeedConfiguration (..))
import Lucid

https :: (IsString s, Semigroup s) => s -> s
https = (<>) "https://"

deriving instance Generic FeedConfiguration

instance Binary FeedConfiguration

data BlogPost m = BlogPost
  { feedConfig :: FeedConfiguration,
    html :: HtmlT m ()
  }

-- deriving (Show, Typeable, Generic)

defaultFeedConfig :: FeedConfiguration
defaultFeedConfig =
  FeedConfiguration
    { feedTitle = "ここにタイトルが入る",
      feedDescription = "ここに記事の説明が入る",
      feedAuthorName = "linguini",
      feedAuthorEmail = "9647142@gmail.com",
      feedRoot = "https://1inguini.github.io"
    }

-- mkBlogPost :: Monad m => FeedConfiguration -> HtmlT m () -> BlogPost m
mkBlogPost :: FeedConfiguration -> Html () -> BlogPost Identity
mkBlogPost feedConfig =
  let title = pack $ feedTitle feedConfig
   in BlogPost feedConfig
        . template title
        . article_
        . (h1_ (toHtmlRaw title) <>)

template :: Monad m => Text -> HtmlT m () -> HtmlT m ()
template title content = doctypehtml_ $ do
  head_ [] $ do
    meta_ [charset_ "utf-8"]
    title_ $ toHtmlRaw title
    meta_ [name_ "linguini", content_ "blog"]
    meta_ [name_ "generator", content_ "Hakyll"]
    meta_ [name_ "viewport", content_ "width=device-width, initial-scale=1"]
    link_ [rel_ "icon", href_ "https://avatars0.githubusercontent.com/u/42938754"]
    -- link_ [rel_ "stylesheet", href_ "https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css"]
    link_ [rel_ "stylesheet", href_ "https://cdn.jsdelivr.net/npm/@exampledev/new.css/new.min.css"]
    body_ $ do
      header_ $ h1_ "linguiniの✨ブログ✨"
      main_ content
      footer_ $ "Copyright: © 2020 linguini. Site proudly generated by " <> link "http://jaspervdj.be/hakyll" "Hakyll" <> ". Visit the site repository from " <> newTabLink "https://github.com/1inguini/1inguini.github.io" "here" <> "."

type Link = (FilePath, String)

data IndexData = IndexData
  { externals :: [Link],
    articles :: [Link]
  }
  deriving (Show, Eq)

link :: Monad m => Text -> HtmlT m () -> HtmlT m ()
link l = a_ [href_ l]

newTabLink :: Monad m => Text -> HtmlT m () -> HtmlT m ()
newTabLink l = a_ (href_ l : newTabAttr)

newTabAttr :: [Attribute]
newTabAttr = [target_ "_blank", rel_ "noreferrer noopener"]

obviousLink :: Monad m => Text -> HtmlT m ()
obviousLink l = link l $ toHtmlRaw l

githubLink :: Monad m => Text -> HtmlT m ()
githubLink repo =
  a_ (href_ (https "github.com/" <> repo) : newTabAttr) $ toHtmlRaw repo

linkList :: (Monad m, Foldable t) => [Attribute] -> t Link -> HtmlT m ()
linkList attrs ls =
  ul_ $
    mapM_
      ( \(path, desc) ->
          li_ $ a_ (href_ (pack path) : attrs) (toHtmlRaw desc)
      )
      ls
