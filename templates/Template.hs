{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE StandaloneDeriving #-}

-- | basic templates
module Template
  ( module Hakyll,
    module Lucid,
    BlogPost (..),
    Link,
    IndexData (..),
    defaultFeedConfig,
    mkBlogPost,
    template,
    link,
    selfLink,
    githubLink,
    linkList,
  )
where

import Data.Binary
import Data.Text (Text, pack)
import Data.Typeable
import GHC.Generics (Generic)
import Hakyll (FeedConfiguration (..))
import Lucid

deriving instance Typeable FeedConfiguration

deriving instance Generic FeedConfiguration

instance Binary FeedConfiguration

data BlogPost = BlogPost
  { feedConfig :: FeedConfiguration,
    html :: Html ()
  }
  deriving (Show, Typeable, Generic)

defaultFeedConfig :: FeedConfiguration
defaultFeedConfig =
  FeedConfiguration
    { feedTitle = "ここにタイトルが入る",
      feedDescription = "ここに記事の説明が入る",
      feedAuthorName = "linguini",
      feedAuthorEmail = "9647142@gmail.com",
      feedRoot = "https://1inguini.github.io"
    }

mkBlogPost :: FeedConfiguration -> Html () -> BlogPost
mkBlogPost feedConfig =
  let title = pack $ feedTitle feedConfig
   in BlogPost feedConfig
        . template title
        . article_
        . (h1_ (toHtmlRaw title) <>)

template :: Text -> Html () -> Html ()
template title content = doctypehtml_ $ do
  head_ [] $ do
    meta_ [charset_ "utf-8"]
    title_ $ toHtmlRaw title
    meta_ [name_ "linguini", content_ "blog"]
    meta_ [name_ "generator", content_ "Hakyll"]
    meta_ [name_ "viewport", content_ "width=device-width, initial-scale=1"]
    link_ [rel_ "icon", href_ "https://avatars0.githubusercontent.com/u/42938754"]
    -- link_ [rel_ "stylesheet", href_ "https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css"]
    link_ [rel_ "stylesheet", href_ "https://cdn.jsdelivr.net/npm/@exampledev/new.css/new.min.css"]
    body_ $ do
      header_ $ h1_ "linguiniの✨ブログ✨"
      main_ content
      footer_ $ "Copyright: © 2020 linguini. Site proudly generated by " <> link "http://jaspervdj.be/hakyll" "Hakyll"

type Link = (FilePath, String)

data IndexData = IndexData
  { articles :: [Link],
    redirects :: [Link]
  }
  deriving (Show, Eq)

link :: Text -> Html () -> Html ()
link l = a_ [href_ l]

selfLink :: Text -> Html ()
selfLink l = link l $ toHtmlRaw l

githubLink :: Text -> Html ()
githubLink repo =
  link ("https://github.com/" <> repo) $ toHtmlRaw repo

linkList :: Foldable t => t Link -> Html ()
linkList ls =
  ul_ $
    mapM_
      ( \(path, desc) ->
          li_ $ link (pack path) (toHtmlRaw desc)
      )
      ls
